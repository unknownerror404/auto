{"version":3,"sources":["webpack:///./docs/pages/troubleshooting.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","id","currentPage","aria-hidden","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21"],"mappings":"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","file":"troubleshooting.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto/','pages/troubleshooting.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1>Troubleshooting</h1>\n<h2 id=\"error%3A-can't-find-a-github-token-to-use\">Error: Can't find a GitHub token to use <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#error%3A-can't-find-a-github-token-to-use\" aria-hidden=\"true\"></Link></h2>\n<p>You must set a <code>GH_TOKEN</code> for <code>auto</code> to work. Make sure to add your <code>NPM_TOKEN</code> while you're at it.</p>\n<h2 id=\"npm-err!-git-working-directory-not-clean\">npm ERR! Git working directory not clean <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#npm-err!-git-working-directory-not-clean\" aria-hidden=\"true\"></Link></h2>\n<p>To version and publish you cannot have any changes in the git repo during publish. This means that if you build some files before release that aren't git-ignored <code>auto</code> will fail to continue. To fix this either add those <code>dist</code> files to your <code>.gitignore</code> or commit them somehow before the release.</p>\n<h2 id=\"npm-err!-need-auth-auth-required-for-publishing\">npm ERR! need auth auth required for publishing <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#npm-err!-need-auth-auth-required-for-publishing\" aria-hidden=\"true\"></Link></h2>\n<p>This error will occur when you do not have a <code>NPM_TOKEN</code> set.</p>\n<h3 id=\"still-getting-errors%3F!\">Still getting errors?! <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#still-getting-errors%3F!\" aria-hidden=\"true\"></Link></h3>\n<p>Make sure that <code>npm</code> is trying to publish to the correct registry. Force <code>npm</code>/<code>lerna</code> to use the public registry by adding the following to your package.json:</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"publishConfig\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"registry\"</span>: <span className=\"hljs-string\">\"https://registry.npmjs.org/\"</span>,<br />    <span className=\"hljs-attr\">\"access\"</span>: <span className=\"hljs-string\">\"public\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<h2 id=\"hangs-on%3A-are-you-sure-you-want-to-continue-connecting-(yes%2Fno)%3F\">Hangs on: Are you sure you want to continue connecting (yes/no)? <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#hangs-on%3A-are-you-sure-you-want-to-continue-connecting-(yes%2Fno)%3F\" aria-hidden=\"true\"></Link></h2>\n<p>This mean your environment does not trust github. To change this add this command somewhere before <code>auto</code></p>\n<p>public:</p>\n<pre><code className=\"language-sh\">mkdir ~/.ssh/ &amp;&amp; <span className=\"hljs-built_in\">echo</span> -e <span className=\"hljs-string\">\"Host github.com\\n\\tStrictHostKeyChecking no\\n\"</span> &gt; ~/.ssh/config<br /></code></pre>\n<p>enterprise:</p>\n<pre><code className=\"language-sh\">mkdir ~/.ssh/ &amp;&amp; <span className=\"hljs-built_in\">echo</span> -e <span className=\"hljs-string\">\"Host github.YOUR_COMPANY.com\\n\\tStrictHostKeyChecking no\\n\"</span> &gt; ~/.ssh/config<br /></code></pre>\n<h2 id=\"you-cannot-publish-over-the-previously-published-versions\">You cannot publish over the previously published versions <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#you-cannot-publish-over-the-previously-published-versions\" aria-hidden=\"true\"></Link></h2>\n<p>If you've encountered any of these errors you'll probably run into this problem. If the whole release process doesn't complete you can end up in a state when <code>auto</code> published the new version, but doesn't push that back to github. To fix this just bump the version number to the &quot;previously published version&quot;.</p>\n<h2 id=\"cannot-read-owner-and-package-name-from-github-url-in-package.json\">Cannot read owner and package name from GitHub URL in package.json <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#cannot-read-owner-and-package-name-from-github-url-in-package.json\" aria-hidden=\"true\"></Link></h2>\n<p>This means that you do not have a repository set in your package.json. Add something along the line of:</p>\n<pre><code className=\"language-json\">&#123;<br />  \"repository\": &#123;<br />    \"type\": \"git\",<br />    \"url\": \"https://github.com/intuit/auto\"<br />  &#125;,<br />  // or simply<br />  \"repository\": \"intuit/auto\"<br />&#125;<br /></code></pre>\n<h2 id=\"how-do-i-auto-a-fork-of-another-repo%3F\">How do I auto a fork of another repo? <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#how-do-i-auto-a-fork-of-another-repo%3F\" aria-hidden=\"true\"></Link></h2>\n<p>If auto doesn't find a last release it will default to the first commit for version calculation (and a log of other things). If you have forked a repo, you fork all the merge commit messages as well. This confuses <code>auto</code> since it will look for those pull requests in your fork and not the main one.</p>\n<p>To remedy this first tag your first commit in the fork with your first version. If the tags from the original repo are still in your repo you should just bump that version. This will let <code>auto</code> ignore all the old merge commits.</p>\n\n        <article className=\"message column is-warning\">\n          \n          <div className=\"message-body\">\n      <p>⚠️ You must also match this new tag version in your package.json</p>\n\n        </div>\n      </article>\n    <pre><code className=\"language-sh\"><span className=\"hljs-comment\"># Set head to last release and tag it with 2.10.1</span><br />git tag v2.10.1<br /></code></pre>\n<p>Then on GitHub go to your project, click release, then draft a new release. Select the tag you just published and <code>publish release</code>. Now auto will be able to use the correct version and git log!</p>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}